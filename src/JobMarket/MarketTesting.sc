package JobMarket

import util.Random

object MarketTesting {
  def funPrint[T]( x: T ) = { println(x); x }     //> funPrint: [T](x: T)T

  def mean[T](xs:Iterable[T])( implicit num: Numeric[T] ) = num.toDouble(xs.sum) / xs.size
                                                  //> mean: [T](xs: Iterable[T])(implicit num: Numeric[T])Double

  def std[T](xs:Iterable[T])( implicit num: Numeric[T] ) = 	{
    val av = mean(xs)
	  math.sqrt((mean(xs map {v => List(v, v).product}) - av*av)*xs.size/(xs.size - 1))
  }                                               //> std: [T](xs: Iterable[T])(implicit num: Numeric[T])Double
  
  def wmean(xs:Iterable[(Double,Double)]) = (xs.foldLeft((0.0, 0.0))((mw, vw) => (mw._1 + vw._1*vw._2, mw._2 + vw._2))) match {case (v,w) => v/w}
                                                  //> wmean: (xs: Iterable[(Double, Double)])Double
 
 
	def normDist( mean: Double, std: Double ) = {
    (((1 to 64) map ( _ => math.random ) sum) - 32.0 )/ 4.0 * std  + mean
  }                                               //> normDist: (mean: Double, std: Double)Double
  
  val (ws, fm) = JobSim.marketSim( 3, 0.2, 3, 0.5, 2.0 ).unzip
                                                  //> Workers:
                                                  //| 1: List(1.5049560162645086, 0.8032675180008135, 0.8730067155483793)
                                                  //| 2: List(1.2495957295273479, 1.3009678092792991, 0.8672784192016945)
                                                  //| 3: List(1.06568016454217, 1.0848980305637763, 1.06224023279925)
                                                  //| Jobs: 2.7864729806814084
                                                  //| 0: List(0.02615992433523806, 0.04974701537825327, 0.04811185503530169)
                                                  //| 1: List(0.004600280828887664, 0.03832313844885114, 0.04492019525511336)
                                                  //| 2: List(0.03213884143247926, 0.06025307211997984, 0.025425076886213226)
                                                  //| 3: List(0.05208057440644167, 0.09965630547073204, 0.1392374336829723)
                                                  //| 4: List(0.006608563930403317, 0.0020621313562787834, 0.20827195061958997)
                                                  //| 5: List(0.1292750878864887, 0.05619881408020089, 0.15290143016427313)
                                                  //| 6: List(0.05546875214457184, 0.09255609118846117, 0.021276513475572065)
                                                  //| 7: List(0.06020223866898598, 0.17503898449661884, 0.10505270610649396)
                                                  //| 8: List(0.042647107813482445, 0.06840924612904867, 0.021007585000635404)
                                                  //| 9: List(0.11563267017828363, 0.0679210977397821
                                                  //| Output exceeds cutoff limit.
  fm                                              //> res0: List[List[JobMarket.Bid]] = List(List(Bid(3,12,0.012340937049511861), 
                                                  //| Bid(1,5,0.35556248650283395), Bid(2,6,0.1546836250063873), Bid(2,8,0.1282728
                                                  //| 5192125518), Bid(1,14,0.21521091292407887), Bid(3,0,0.12373370376725018), Bi
                                                  //| d(2,13,0.08577989621897673), Bid(2,9,0.34631908963653796), Bid(3,1,0.0876084
                                                  //| 016206475), Bid(2,2,0.11636224309822618), Bid(3,7,0.3378631514907676)))
  fm.flatten                                      //> res1: List[JobMarket.Bid] = List(Bid(3,12,0.012340937049511861), Bid(1,5,0.3
                                                  //| 5556248650283395), Bid(2,6,0.1546836250063873), Bid(2,8,0.12827285192125518)
                                                  //| , Bid(1,14,0.21521091292407887), Bid(3,0,0.12373370376725018), Bid(2,13,0.08
                                                  //| 577989621897673), Bid(2,9,0.34631908963653796), Bid(3,1,0.0876084016206475),
                                                  //|  Bid(2,2,0.11636224309822618), Bid(3,7,0.3378631514907676))
  fm.flatten flatMap {_.worker.bids}              //> res2: List[JobMarket.Bid] = List(Bid(3,0,0.12373370376725018), Bid(3,1,0.087
                                                  //| 6084016206475), Bid(3,7,0.3378631514907676), Bid(3,2,0.11696086268562678), B
                                                  //| id(3,8,0.131084570451229), Bid(3,6,0.16671079272816552), Bid(3,12,0.01234093
                                                  //| 7049511861), Bid(3,13,0.08623259452106462), Bid(1,5,0.35556248650283395), Bi
                                                  //| d(1,14,0.21521091292407887), Bid(2,9,0.34631908963653796), Bid(2,0,0.1271973
                                                  //| 0369124643), Bid(2,7,0.34291500932902275), Bid(2,12,0.012612800262262342), B
                                                  //| id(2,2,0.11636224309822618), Bid(2,8,0.12827285192125518), Bid(2,13,0.085779
                                                  //| 89621897673), Bid(2,6,0.1546836250063873), Bid(2,14,0.21610804228962155), Bi
                                                  //| d(2,9,0.34631908963653796), Bid(2,0,0.12719730369124643), Bid(2,7,0.34291500
                                                  //| 932902275), Bid(2,12,0.012612800262262342), Bid(2,2,0.11636224309822618), Bi
                                                  //| d(2,8,0.12827285192125518), Bid(2,13,0.08577989621897673), Bid(2,6,0.1546836
                                                  //| 250063873), Bid(2,14,0.21610804228962155), Bid(1,5,0.35556248650283395), Bid
                                                  //| (1,14,0.2152109129240788
                                                  //| Output exceeds cutoff limit.
  (fm.flatten flatMap {_.worker.bids} toSet)      //> res3: scala.collection.immutable.Set[JobMarket.Bid] = Set(Bid(2,13,0.0857798
                                                  //| 9621897673), Bid(1,14,0.21521091292407887), Bid(3,1,0.0876084016206475), Bid
                                                  //| (3,8,0.131084570451229), Bid(3,12,0.012340937049511861), Bid(2,0,0.127197303
                                                  //| 69124643), Bid(3,7,0.3378631514907676), Bid(2,12,0.012612800262262342), Bid(
                                                  //| 3,2,0.11696086268562678), Bid(3,0,0.12373370376725018), Bid(3,6,0.1667107927
                                                  //| 2816552), Bid(2,2,0.11636224309822618), Bid(1,5,0.35556248650283395), Bid(2,
                                                  //| 8,0.12827285192125518), Bid(2,7,0.34291500932902275), Bid(2,6,0.154683625006
                                                  //| 3873), Bid(2,9,0.34631908963653796), Bid(3,13,0.08623259452106462), Bid(2,14
                                                  //| ,0.21610804228962155))
  (fm.flatten flatMap {_.worker.bids} toSet).size //> res4: Int = 19
  (fm flatMap {_ map { b: Bid => b.worker } toSet})
                                                  //> res5: List[JobMarket.Worker] = List(3, 1, 2)
  (fm flatMap {_ map { b: Bid => b.worker } toSet}) map {w: Worker => w.bids.length}
                                                  //> res6: List[Int] = List(8, 2, 9)
  (fm flatMap {_ flatMap { b: Bid => Set(b.worker) }}) map {w: Worker => w.bids.length}
                                                  //> res7: List[Int] = List(8, 2, 9, 9, 2, 8, 9, 9, 8, 9, 8)
  (fm flatMap {_ flatMap { b: Bid => Set(b.worker) }}) map {w: Worker => w.bids.length} sum
                                                  //> res8: Int = 81

 
  
}