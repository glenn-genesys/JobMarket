package JobMarket

import util.Random
import JobSim._

object MarketTesting {
  def funPrint[T]( x: T ) = { println(x); x }     //> funPrint: [T](x: T)T

  def mean[T](xs:Iterable[T])( implicit num: Numeric[T] ) = num.toDouble(xs.sum) / xs.size
                                                  //> mean: [T](xs: Iterable[T])(implicit num: Numeric[T])Double

  def std[T](xs:Iterable[T])( implicit num: Numeric[T] ) = 	{
    val av = mean(xs)
	  math.sqrt((mean(xs map {v => List(v, v).product}) - av*av)*xs.size/(xs.size - 1))
  }                                               //> std: [T](xs: Iterable[T])(implicit num: Numeric[T])Double
  
  def wmean(xs:Iterable[(Double,Double)]) = (xs.foldLeft((0.0, 0.0))((mw, vw) => (mw._1 + vw._1*vw._2, mw._2 + vw._2))) match {case (v,w) => v/w}
                                                  //> wmean: (xs: Iterable[(Double, Double)])Double
 
 
	def normDist( mean: Double, std: Double ) = {
    (((1 to 64) map ( _ => math.random ) sum) - 32.0 )/ 4.0 * std  + mean
  }                                               //> normDist: (mean: Double, std: Double)Double

  val numWorkers = 100                            //> numWorkers  : Int = 100
  val numDisciplines = 10                         //> numDisciplines  : Int = 10
  val numJobs = 100                               //> numJobs  : Int = 100
  val jobSize = 0.5                               //> jobSize  : Double = 0.5
  
  val workers = (1 to numWorkers) map (i => Worker(i.toString, (1 to numDisciplines) map ( _ => 1.0/normRand(1.0, 0.2) abs ) toList )) toList
                                                  //> workers  : List[JobMarket.Worker] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
                                                  //| 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
                                                  //| 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
                                                  //| 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                                                  //| 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
                                                  //| 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)
  
  val allJobs = jobStream( orphanJob(jobSize, jobSize/2.0, numDisciplines ) )
                                                  //> allJobs  : Stream[JobMarket.Job] = Stream(0, ?)
  val jobs = (allJobs take numJobs force) toList  //> jobs  : List[JobMarket.Job] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
                                                  //| , 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 3
                                                  //| 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
                                                  //| 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                                                  //|  69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87
                                                  //| , 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99)
  
	val ord1 = for (w <- workers) yield jobs.sortBy( j => (j.workload + j.workerTime(w))/j.workerTime(w))
                                                  //> ord1  : List[List[JobMarket.Job]] = List(List(89, 68, 61, 0, 99, 7, 23, 51,
                                                  //|  87, 97, 25, 33, 49, 69, 1, 21, 41, 19, 90, 96, 56, 73, 27, 39, 95, 84, 24,
                                                  //|  40, 36, 17, 92, 83, 50, 85, 32, 81, 11, 57, 9, 98, 43, 63, 42, 66, 13, 76,
                                                  //|  75, 72, 34, 59, 38, 48, 54, 80, 65, 16, 12, 60, 67, 31, 53, 79, 64, 62, 30
                                                  //| , 70, 2, 14, 77, 71, 52, 10, 28, 15, 74, 8, 4, 78, 44, 35, 86, 22, 55, 46, 
                                                  //| 29, 5, 94, 91, 47, 18, 26, 6, 45, 58, 20, 3, 37, 93, 88, 82), List(63, 67, 
                                                  //| 32, 85, 30, 76, 74, 80, 10, 21, 62, 55, 83, 86, 44, 79, 42, 14, 91, 37, 16,
                                                  //|  2, 78, 12, 46, 82, 35, 54, 20, 75, 95, 6, 70, 53, 47, 88, 22, 94, 56, 24, 
                                                  //| 39, 3, 45, 33, 71, 17, 29, 50, 18, 93, 52, 90, 98, 84, 9, 26, 23, 59, 48, 3
                                                  //| 8, 15, 72, 40, 92, 5, 19, 13, 1, 49, 51, 97, 57, 87, 60, 69, 25, 34, 27, 73
                                                  //| , 41, 96, 36, 8, 11, 65, 77, 43, 28, 66, 7, 58, 99, 31, 64, 4, 0, 81, 68, 6
                                                  //| 1, 89), List(89, 68, 61, 0, 87, 51, 49, 19, 7, 99, 23, 59, 25, 52, 50, 96, 
                                                  //| 97, 41, 45, 26, 3, 17, 
                                                  //| Output exceeds cutoff limit.
	
	val ord2 = for (w <- workers) yield jobs.sortBy( j => j.workload/j.workerTime(w))
                                                  //> ord2  : List[List[JobMarket.Job]] = List(List(89, 68, 61, 0, 99, 7, 23, 51,
                                                  //|  87, 97, 25, 33, 49, 69, 1, 21, 41, 19, 90, 96, 56, 73, 27, 39, 95, 84, 24,
                                                  //|  40, 36, 17, 92, 83, 50, 85, 32, 81, 11, 57, 9, 98, 43, 63, 42, 66, 13, 76,
                                                  //|  75, 72, 34, 59, 38, 48, 54, 80, 65, 16, 12, 60, 67, 31, 53, 79, 64, 62, 30
                                                  //| , 70, 2, 14, 77, 71, 52, 10, 28, 15, 74, 8, 4, 78, 44, 35, 86, 22, 55, 46, 
                                                  //| 29, 5, 94, 91, 47, 18, 26, 6, 45, 58, 20, 3, 37, 93, 88, 82), List(63, 67, 
                                                  //| 32, 85, 30, 76, 74, 80, 10, 21, 62, 55, 83, 86, 44, 79, 42, 14, 91, 37, 16,
                                                  //|  2, 78, 12, 46, 82, 35, 54, 20, 75, 95, 6, 70, 53, 47, 88, 22, 94, 56, 24, 
                                                  //| 39, 3, 45, 33, 71, 17, 29, 50, 18, 93, 52, 90, 98, 84, 9, 26, 23, 59, 48, 3
                                                  //| 8, 15, 72, 40, 92, 5, 19, 13, 1, 49, 51, 97, 57, 87, 60, 69, 25, 34, 27, 73
                                                  //| , 41, 96, 36, 8, 11, 65, 77, 43, 28, 66, 7, 58, 99, 31, 64, 4, 0, 81, 68, 6
                                                  //| 1, 89), List(89, 68, 61, 0, 87, 51, 49, 19, 7, 99, 23, 59, 25, 52, 50, 96, 
                                                  //| 97, 41, 45, 26, 3, 17, 
                                                  //| Output exceeds cutoff limit.
	
	ord1 equals ord2                          //> res0: Boolean = true

	val ord3 = for (j <- jobs) yield workers.sortBy( w => j.workload/(j.workload + j.workerTime(w)))
                                                  //> ord3  : List[List[JobMarket.Worker]] = List(List(82, 66, 95, 13, 21, 62, 25
                                                  //| , 1, 17, 11, 92, 20, 3, 8, 16, 85, 45, 19, 51, 40, 30, 35, 78, 39, 18, 98, 
                                                  //| 63, 4, 10, 83, 72, 93, 70, 43, 24, 52, 94, 14, 74, 90, 73, 55, 86, 77, 80, 
                                                  //| 7, 68, 49, 76, 42, 12, 59, 56, 9, 65, 53, 48, 34, 46, 97, 32, 15, 87, 44, 6
                                                  //| 0, 91, 36, 6, 69, 22, 38, 79, 96, 57, 64, 26, 31, 50, 5, 37, 67, 81, 27, 29
                                                  //| , 23, 88, 2, 71, 89, 33, 99, 41, 28, 100, 47, 75, 58, 54, 84, 61), List(86,
                                                  //|  72, 68, 53, 60, 26, 98, 23, 7, 29, 87, 46, 40, 67, 15, 93, 85, 4, 8, 76, 4
                                                  //| 3, 91, 88, 5, 50, 35, 39, 19, 54, 92, 6, 37, 94, 38, 47, 34, 27, 1, 71, 84,
                                                  //|  31, 73, 62, 65, 59, 32, 20, 24, 90, 74, 64, 41, 49, 3, 9, 58, 78, 79, 51, 
                                                  //| 18, 80, 96, 89, 2, 99, 63, 13, 52, 17, 10, 21, 77, 22, 30, 100, 55, 28, 75,
                                                  //|  14, 36, 56, 97, 25, 33, 57, 48, 83, 11, 12, 61, 44, 69, 42, 45, 95, 16, 70
                                                  //| , 66, 81, 82), List(13, 6, 21, 73, 28, 8, 63, 79, 39, 87, 98, 51, 78, 30, 2
                                                  //| 5, 5, 20, 53, 18, 95, 9
                                                  //| Output exceeds cutoff limit.
	
	val ord4 = for (j <- jobs) yield workers.sortBy( w => j.workload/j.workerTime(w))
                                                  //> ord4  : List[List[JobMarket.Worker]] = List(List(82, 66, 95, 13, 21, 62, 25
                                                  //| , 1, 17, 11, 92, 20, 3, 8, 16, 85, 45, 19, 51, 40, 30, 35, 78, 39, 18, 98, 
                                                  //| 63, 4, 10, 83, 72, 93, 70, 43, 24, 52, 94, 14, 74, 90, 73, 55, 86, 77, 80, 
                                                  //| 7, 68, 49, 76, 42, 12, 59, 56, 9, 65, 53, 48, 34, 46, 97, 32, 15, 87, 44, 6
                                                  //| 0, 91, 36, 6, 69, 22, 38, 79, 96, 57, 64, 26, 31, 50, 5, 37, 67, 81, 27, 29
                                                  //| , 23, 88, 2, 71, 89, 33, 99, 41, 28, 100, 47, 75, 58, 54, 84, 61), List(86,
                                                  //|  72, 68, 53, 60, 26, 98, 23, 7, 29, 87, 46, 40, 67, 15, 93, 85, 4, 8, 76, 4
                                                  //| 3, 91, 88, 5, 50, 35, 39, 19, 54, 92, 6, 37, 94, 38, 47, 34, 27, 1, 71, 84,
                                                  //|  31, 73, 62, 65, 59, 32, 20, 24, 90, 74, 64, 41, 49, 3, 9, 58, 78, 79, 51, 
                                                  //| 18, 80, 96, 89, 2, 99, 63, 13, 52, 17, 10, 21, 77, 22, 30, 100, 55, 28, 75,
                                                  //|  14, 36, 56, 97, 25, 33, 57, 48, 83, 11, 12, 61, 44, 69, 42, 45, 95, 16, 70
                                                  //| , 66, 81, 82), List(13, 6, 21, 73, 28, 8, 63, 79, 39, 87, 98, 51, 78, 30, 2
                                                  //| 5, 5, 20, 53, 18, 95, 9
                                                  //| Output exceeds cutoff limit.
	
	ord3 equals ord4                          //> res1: Boolean = true

  val (ws, fm) = JobSim.marketSim( 3, 0.2, 3, 0.5, 2.0 ).unzip
                                                  //> Workers:
                                                  //| 1: List(1.124043740842545, 1.312082423720568, 0.8582220560034974)
                                                  //| 2: List(0.7841343729573572, 1.019144142727378, 0.7673804012170549)
                                                  //| 3: List(1.6256296660651275, 0.9322605416145616, 1.1560422963683679)
                                                  //| Jobs: 2.939698365798299
                                                  //| 0: List(0.036381454942161426, 0.0766288163088882, 0.14851899019968)
                                                  //| 1: List(0.05404169514227932, 0.10343670356572564, 0.02127128671604324)
                                                  //| 2: List(0.004457991934476344, 0.023083173397041586, 0.10569726839194657)
                                                  //| 3: List(0.0176706433923499, 0.04661803190456207, 0.017190581481633313)
                                                  //| 4: List(0.044079504854048344, 0.11072889820089071, 0.10250630210975112)
                                                  //| 5: List(0.01528508511962552, 0.05294602759537216, 0.05859339716407391)
                                                  //| 6: List(0.15103404973404647, 0.05561991737586736, 0.023643593302007635)
                                                  //| 7: List(0.04992595393210085, 0.19359732799095325, 0.01328770364775811)
                                                  //| 8: List(0.03105490067699509, 0.019518691578511084, 0.2647103831208554)
                                                  //| 9: List(0.04028053615332253, 0.010886
                                                  //| Output exceeds cutoff limit.
  fm                                              //> res2: List[List[JobMarket.Bid]] = List(List(Bid(3,14,0.11590705086648362), 
                                                  //| Bid(3,9,0.05103687958742102), Bid(1,1,0.1652234537851846), Bid(3,6,0.201659
                                                  //| 56099473648), Bid(2,4,0.27787867599743143), Bid(3,8,0.29215203651682264), B
                                                  //| id(1,7,0.23212993105758473), Bid(1,12,0.2823037746562505), Bid(2,5,0.137311
                                                  //| 99958743157), Bid(2,3,0.086079228529741)))
  fm.flatten                                      //> res3: List[JobMarket.Bid] = List(Bid(3,14,0.11590705086648362), Bid(3,9,0.0
                                                  //| 5103687958742102), Bid(1,1,0.1652234537851846), Bid(3,6,0.20165956099473648
                                                  //| ), Bid(2,4,0.27787867599743143), Bid(3,8,0.29215203651682264), Bid(1,7,0.23
                                                  //| 212993105758473), Bid(1,12,0.2823037746562505), Bid(2,5,0.13731199958743157
                                                  //| ), Bid(2,3,0.086079228529741))
  fm.flatten flatMap {_.worker.bids}              //> res4: List[JobMarket.Bid] = List(Bid(3,8,0.29215203651682264), Bid(3,6,0.20
                                                  //| 165956099473648), Bid(3,9,0.05103687958742102), Bid(3,14,0.1159070508664836
                                                  //| 2), Bid(3,8,0.29215203651682264), Bid(3,6,0.20165956099473648), Bid(3,9,0.0
                                                  //| 5103687958742102), Bid(3,14,0.11590705086648362), Bid(1,1,0.165223453785184
                                                  //| 6), Bid(1,7,0.23212993105758473), Bid(1,12,0.2823037746562505), Bid(3,8,0.2
                                                  //| 9215203651682264), Bid(3,6,0.20165956099473648), Bid(3,9,0.0510368795874210
                                                  //| 2), Bid(3,14,0.11590705086648362), Bid(2,5,0.13731199958743157), Bid(2,4,0.
                                                  //| 27787867599743143), Bid(2,3,0.086079228529741), Bid(2,1,0.18844082578300195
                                                  //| ), Bid(2,7,0.26387874857165095), Bid(2,12,0.31740202216431224), Bid(3,8,0.2
                                                  //| 9215203651682264), Bid(3,6,0.20165956099473648), Bid(3,9,0.0510368795874210
                                                  //| 2), Bid(3,14,0.11590705086648362), Bid(1,1,0.1652234537851846), Bid(1,7,0.2
                                                  //| 3212993105758473), Bid(1,12,0.2823037746562505), Bid(1,1,0.1652234537851846
                                                  //| ), Bid(1,7,0.2321299310
                                                  //| Output exceeds cutoff limit.
  (fm.flatten flatMap {_.worker.bids} toSet)      //> res5: scala.collection.immutable.Set[JobMarket.Bid] = Set(Bid(2,3,0.0860792
                                                  //| 28529741), Bid(2,5,0.13731199958743157), Bid(1,7,0.23212993105758473), Bid(
                                                  //| 2,1,0.18844082578300195), Bid(2,4,0.27787867599743143), Bid(3,6,0.201659560
                                                  //| 99473648), Bid(2,12,0.31740202216431224), Bid(1,1,0.1652234537851846), Bid(
                                                  //| 3,9,0.05103687958742102), Bid(3,8,0.29215203651682264), Bid(1,12,0.28230377
                                                  //| 46562505), Bid(3,14,0.11590705086648362), Bid(2,7,0.26387874857165095))
  (fm.flatten flatMap {_.worker.bids} toSet).size //> res6: Int = 13
  (fm flatMap {_ map { b: Bid => b.worker } toSet})
                                                  //> res7: List[JobMarket.Worker] = List(3, 1, 2)
  (fm flatMap {_ map { b: Bid => b.worker } toSet}) map {w: Worker => w.bids.length}
                                                  //> res8: List[Int] = List(4, 3, 6)
  (fm flatMap {_ flatMap { b: Bid => Set(b.worker) }}) map {w: Worker => w.bids.length}
                                                  //> res9: List[Int] = List(4, 4, 3, 4, 6, 4, 3, 3, 6, 6)
  (fm flatMap {_ flatMap { b: Bid => Set(b.worker) }}) map {w: Worker => w.bids.length} sum
                                                  //> res10: Int = 43

 
  
}